# -*- coding: utf-8 -*-
"""Soccer Match Prediction Machine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T6LfUt8Rx-83iORNEjvS5D35X4LEw_K-
"""

import pandas as pd
import altair as alt
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as datetime

team= pd.read_excel("Team.xlsx") #team df
team.loc[team.team_long_name=='Manchester United']

player= pd.read_excel("Player.xlsx") #player df
player.head()

player_stats= pd.read_excel("Player_Attributes.xlsx") #player attributes df
player_stats.drop(player_stats.loc[:, 'potential':'gk_reflexes'].columns, axis = 1, inplace=True) #drop unnecesary attributes; only want overall rating
player_stats.head()

match= pd.read_excel("Match.xlsx") #match df
manutd_match=match.loc[(match['home_team_api_id']==10260)] #Manchester United home matches df
manutd_match.drop(manutd_match.loc[:, 'home_player_X1':'home_player_X11'].columns, axis = 1, inplace=True) #drop home player X coordinates
manutd_match.drop(manutd_match.loc[:, 'away_player_X1':'away_player_X11'].columns, axis = 1, inplace=True) #drop away player X coordinates
manutd_match.drop(manutd_match.loc[:, 'goal':'BSA'].columns, axis=1, inplace=True) #drop supplemental statistics from match, such as fouls, yellow/red cards, etc.
manutd_match.dropna(inplace=True) #drop rows with Na
manutd_match.reset_index(inplace=True) #reset df indices
manutd_match.head()

manutd_match['date']=manutd_match['date'].astype('datetime64[D]').values #convert date column from <M8[ns] to datetiem64[ns]
player_stats['date']=player_stats['date'].astype('datetime64[D]').values #convert date column from <M8[ns] to datetiem64[ns]
def getRating(r,c): #get rating function
  x=manutd_match.iloc[r,c] #which player to get rating of in a specific match
  y=player_stats.loc[(player_stats['player_api_id']==x)] #get all ratings of selected player
  y=y.loc[y['date']<manutd_match.at[r,'date']] #keep ratings given prior to match date
  z=min(abs(y['date']-manutd_match.at[r,'date'])).days #find closest rating date prior to match date
  y=y.loc[abs(y['date']-manutd_match.at[r,'date']).astype('timedelta64[D]')==z] #choose newest rating prior to match date
  y.reset_index(inplace=True) #reset index
  return y.loc[0,'overall_rating'] #return rating column

def getHFormation(j):#get home team formation function
  x=""
  i=1
  mylist = list(manutd_match.iloc[j,[12,13,14,15,16,17,18,19,20,21,22]]) #list of home player Y coordinates from specified row, excluding GK
  myset = set(mylist) #set of home player Y coordinates, excluding GK
  myset=sorted(myset) #set sorted in ascending order
  while i<len(myset): #go through each index in myset
    x+=str(mylist.count(myset[i])) #count number of times each index in myset appears in mylist to get formation
    i+=1
  x= '-'.join(x[i:i + 1] for i in range(0, len(x), 1)) #add a dash between each number
  return x #return formation

def getAFormation(j):# get away team formation function
  x=""
  i=1
  mylist = list(manutd_match.iloc[j,[23,24,25,26,27,28,29,30,31,32,33]]) #list of away player Y coordinates from specified row, excluding GK
  myset = set(mylist) #set of away player Y coordinates, excluding GK
  myset=sorted(myset) #set sorted in ascending order
  while i<len(myset): #go through each index in myset
    x+=str(mylist.count(myset[i])) #count number of times each index in myset appears in mylist to get formation
    i+=1
  x= '-'.join(x[i:i + 1] for i in range(0, len(x), 1)) #add a dash between each number
  return x #return formation

hFormationList=[]
aFormationList=[]
j=0
while j<149: #go through every match 
  hFormationList.append(getHFormation(j)) #add each home team formation to list
  aFormationList.append(getAFormation(j)) #add each away team formation to list
  j+=1
hFormationSet=set(hFormationList) #set of home team formations
aFormationSet=set(aFormationList) #set of away team formations
formationSet=set.union(hFormationSet,aFormationSet) #union set of home and away team formations
formationSet

column_names = ["GK","D1","D2","D3","D4","D5","D6","M1","M2","M3","M4","M5","M6","M7","F1","F2","F3","F4",
                "AGK","AD1","AD2","AD3","AD4","AD5","AD6","AM1","AM2","AM3","AM4","AM5","AM6","AM7","AF1","AF2","AF3","AF4"] #A stands for 'Away'
df = pd.DataFrame(index=range(149),columns=range(36)) #df for player ratings at each position in each match 
df.columns=column_names
df.head()

i=0
while i<149: #go through every match
  j=13 #column to start at for homeplayer ids
  d=1  #column to start inserting defender ratings in df (column D1)
  m=7  #column to start inserting midfielder ratings in df (column M1)
  f=14 #column to start inserting forward ratings in df (column F1)
  mylist = list(manutd_match.iloc[i,[13,14,15,16,17,18,19,20,21,22]]) #list of home player Y coordinates from specified row, excluding GK
  myset = set(mylist) #set of home player Y coordinates, excluding GK
  while j<23: #go through each home player id column
    if(manutd_match.iloc[i,j]==min(myset)): #if minimum Y, then player is a defender
      df.iloc[i,d]=getRating(i,j+22) #add rating to df
      d+=1 #increment to next defender column in df
    if(manutd_match.iloc[i,j]==max(myset)): #if maximum Y, then player is a forward
      df.iloc[i,f]=getRating(i,j+22) #add rating to df
      f+=1 #increment to next forward column in df
    elif((manutd_match.iloc[i,j]!=min(myset))&(manutd_match.iloc[i,j]!=max(myset))): #if neither, then player is a midfielder
      df.iloc[i,m]=getRating(i,j+22) #add rating to df
      m+=1 #increment to next midfielder column in df
    j+=1
  df.iloc[i,0]=getRating(i,34) #add GK rating to df
  i+=1

i=0
while i<149: #go through every match
  j=24 #column to start at for away player ids
  d=19 #column to start inserting defender ratings in df (column AD1)
  m=25 #column to start inserting midfielder ratings in df (column AM1)
  f=32 #column to start inserting forward ratings in df (column AF1)
  mylist = list(manutd_match.iloc[i,[24,25,26,27,28,29,30,31,32,33]]) #list of away player Y coordinates from specified row, excluding GK
  myset = set(mylist) #set of home player Y coordinates, excluding GK
  while j<34: #go through each away player id column
    if(manutd_match.iloc[i,j]==min(myset)): #if minimum Y, then player is a defender
      df.iloc[i,d]=getRating(i,j+22) #add rating to df
      d+=1 #increment to next defender column in df
    if(manutd_match.iloc[i,j]==max(myset)): #if maximum Y, then player is a forward
      df.iloc[i,f]=getRating(i,j+22) #add rating to df
      f+=1 #increment to next forward column in df
    elif((manutd_match.iloc[i,j]!=min(myset))&(manutd_match.iloc[i,j]!=max(myset))): #if neither, then player is a midfielder
      df.iloc[i,m]=getRating(i,j+22) #add rating to df
      m+=1 #increment to next midfielder column in df
    j+=1
  df.iloc[i,18]=getRating(i,45) #add GK rating to df
  i+=1

df.head()

column_names = ["GK","DEF","MID", "OFF","AGK","ADEF","AMID", "AOFF", "RESULT" ]
df2=pd.DataFrame(index=range(149),columns=range(9)) #df for formation and GK, defense, midfield, and offense ratings for each team in each match
df2.columns=column_names
for i in formationSet: #insert home team formation columns
  df2.insert(4,str(i),0)
for i in formationSet: # insert away team formation columns
  df2.insert(23,"A "+str(i),0)
df2.head()

i=0
while i<149: #go through every match
  df2.loc[i,'GK']=int(df.loc[i,'GK']) #add GK rating from df into df2
  df2.loc[i,'DEF']=int(np.mean(df.loc[i, 'D1':'D6'])) #add mean of home defender ratings from df into df2
  df2.loc[i,'MID']=int(np.mean(df.loc[i, 'M1':'M7'])) #add mean of home midfielder ratings from df into df2
  df2.loc[i,'OFF']=int(np.mean(df.loc[i, 'F1':'F4'])) #add mean of home attacker ratings from df into df2
  df2.loc[i,'AGK']=int(df.loc[i,'AGK']) #add away GK rating from df into df2
  df2.loc[i,'ADEF']=int(np.mean(df.loc[i, 'AD1':'AD6'])) #add mean of away defender ratings from df into df2
  df2.loc[i,'AMID']=int(np.mean(df.loc[i, 'AM1':'AM7'])) #add mean of away midfielder ratings from df into df2
  df2.loc[i,'AOFF']=int(np.mean(df.loc[i, 'AF1':'AF4'])) #add mean of away attacker ratings from df into df2
  if((manutd_match.loc[i,'home_team_goal'])>(manutd_match.loc[i,'away_team_goal'])): #if home scored more than away, result is a win, which equals 2
    df2.loc[i,'RESULT']=2
  if((manutd_match.loc[i,'home_team_goal'])==(manutd_match.loc[i,'away_team_goal'])): #if home scored as much as as away, result is draw, which equals 1
    df2.loc[i,'RESULT']=1
  elif((manutd_match.loc[i,'home_team_goal'])<(manutd_match.loc[i,'away_team_goal'])): #if home scored less than away, result is a loss, which equals 0
    df2.loc[i,'RESULT']=0
  j=0
  c=4
  while j<16:
    if(df2.columns[c]==getHFormation(i)): #select which formation home team used in the match by comparing to column names and assigning that column to 1
      df2.iloc[i,c]=1
    if(df2.columns[c]==getAFormation(i)): #select which formation away team used in the match by comparing to column names and assigning that column to 1
      df2.iloc[i,c+19]=1
    c+=1
    j+=1
  i+=1
df2.head()

df2['GK']=df2['GK'].astype(int) #change all column types to int
df2['DEF']=df2['DEF'].astype(int)
df2['MID']=df2['MID'].astype(int)
df2['OFF']=df2['OFF'].astype(int)
df2['AGK']=df2['AGK'].astype(int)
df2['ADEF']=df2['ADEF'].astype(int)
df2['AMID']=df2['AMID'].astype(int)
df2['AOFF']=df2['AOFF'].astype(int)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
X = df2.loc[:,'GK':'A 4-1-2-1-2'].values #independent variables
Y = list(df2.RESULT.values) #dependent variables
train_x, test_x, train_y, test_y = train_test_split(X,Y,test_size=0.3,random_state=0) #split data into training and test groups
clf = LogisticRegression(solver='lbfgs',multi_class='multinomial', max_iter=10000) #set classifier to multinomial logistic regression
clf.fit(train_x, train_y) #train model
print ('Accuracy: ' + str(clf.score(test_x, test_y)*100) + '%') #check model accuracy with test group

df3=pd.DataFrame(index=range(1),columns=range(8)) #df for formation and GK, defense, midfield, and offense ratings for each team in each match
df3.columns=column_names[:8]
for i in formationSet: #insert home team formation columns
  df3.insert(4,str(i),0)
for i in formationSet: # insert away team formation columns
  df3.insert(23,"A "+str(i),0)
df3.loc[0]=[80,79,74,78,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,84,82,83,85,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]
df3['GK']=df3['GK'].astype(int) #change all column types to int
df3['DEF']=df3['DEF'].astype(int)
df3['MID']=df3['MID'].astype(int)
df3['OFF']=df3['OFF'].astype(int)
df3['AGK']=df3['AGK'].astype(int)
df3['ADEF']=df3['ADEF'].astype(int)
df3['AMID']=df3['AMID'].astype(int)
df3['AOFF']=df3['AOFF'].astype(int)
X=df3.values
clf.predict(X)

sns.scatterplot(x='OFF', y='RESULT', data=df2, s=100,alpha=0.2) #darker=higher count
plt.title("OUTCOMES BASED ON OFFENSE", y=1, fontsize=20)
plt.xlabel("OFF")
plt.ylabel("RESULT")
ax = plt.gca()

"""High offensive rating is necessary to have an impact on winning"""

sns.scatterplot(x='DEF', y='RESULT', data=df2, s=100,alpha=0.2) #darker=higher count
plt.title("OUTCOMES BASED ON DEFENSE", y=1, fontsize=20)
plt.xlabel("DEF")
plt.ylabel("RESULT")
ax = plt.gca()

"""Lower defensive rating still affects the chances of winning, so defense is more valuable than offense."""

sns.scatterplot(x='MID', y='RESULT', data=df2, s=100, alpha=0.2) #darker=higher count
plt.title("OUTCOMES BASED ON MIDFIELD", y=1, fontsize=20)
plt.xlabel("MID")
plt.ylabel("RESULT")
ax = plt.gca()

"""Average midfield rating produces best outcome. A decent midfield is needed to win and unlike offense, midfields don't need to be elite to produce good results."""

sns.scatterplot(x='GK', y='RESULT', data=df2, s=100, alpha=0.2) #darker=higher count
plt.title("OUTCOMES BASED ON GK", y=1, fontsize=20)
plt.xlabel("GK")
plt.ylabel("RESULT")
ax = plt.gca()

"""Good GK necessary for winning."""

custom= ["#e74c3c","#2ecc71", "#3498db"] #custom seaborn RGB palette
sns.palplot(sns.color_palette(custom))

sns.scatterplot(x='OFF', y='DEF', palette = custom,hue='RESULT', data=df2, s=100, alpha=0.5) #darker=higher count
plt.title("OUTCOMES BASED ON OFFENSE AND DEFENSE", y=1, fontsize=20)
plt.xlabel("OFF")
plt.ylabel("DEF")
ax = plt.gca()

"""Teams don't win as much with a good offense and a bad defense, whereas teams can still win with a bad offense and a good defense, proving that defense is more valuable than offense."""